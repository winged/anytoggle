#!/usr/bin/python3

# Copyright: 2011 David Vogt <dv@winged.ch>
# License:   BSD 3-Clause

import argparse
import subprocess


def get_current_window_id():
    try:
        output = subprocess.check_output(['xdotool', 'getactivewindow'])
        lines  = output.decode('utf-8').split('\n')
        if len(lines) > 0:
            return int(lines[0].strip())
        print("No matching windows found")

    except:
        pass
    return None


def get_window_id(search):
    try:
        output = subprocess.check_output(['xdotool', 'search', search])
        lines  = output.decode('utf-8').split('\n')
        if len(lines) > 0:
            return int(lines[0].strip())
        print("No matching windows found")

    except:
        pass
    return None


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--title', type=str, help='title to expect')
    parser.add_argument(
        '--start', type=str,
        help='Start command if window does not exist')

    args = parser.parse_args()

    window_id = get_window_id(args.title)
    if window_id is None:
        print("Window doe not exist, starting command...")
        subprocess.Popen(
            args.start,
            shell=True,
            stdin=subprocess.DEVNULL,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
    else:
        current_win_id = get_current_window_id()

        if current_win_id == window_id:
            print("Windowid = %d, currently active. hiding" % window_id)
            subprocess.check_output(['xdotool', 'windowunmap', str(window_id)])
        else:
            print("Windowid = %d, somewhere else. fetching" % window_id)
            subprocess.check_output(['xdotool', 'windowmap',   str(window_id)])
            subprocess.check_output(['wmctrl', '-i', '-R', str(window_id)])
